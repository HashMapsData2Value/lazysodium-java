/*
 * Copyright (c) Terl Tech Ltd • 14/06/19 17:54 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

package com.goterl.lazycode.lazysodium;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.goterl.lazycode.lazysodium.exceptions.AEADAuthenticationException;
import com.goterl.lazycode.lazysodium.interfaces.AEAD;
import com.goterl.lazycode.lazysodium.utils.DetachedDecrypt;
import com.goterl.lazycode.lazysodium.utils.DetachedEncrypt;
import com.goterl.lazycode.lazysodium.utils.Key;
import junit.framework.TestCase;
import org.junit.Test;

public class AEADTest extends BaseTest {

    private final String PASSWORD = "superSecurePassword";

    private String malformCipher(String ciphertext) {
        byte[] malformedBuf = malformCipherBytes(ciphertext);
        return encoder.encode(malformedBuf);
    }

    private byte[] malformCipherBytes(String ciphertext) {
        byte[] cipherBuf = encoder.decode(ciphertext);
        for (int i = 0; i < cipherBuf.length; i++) {
            cipherBuf[i] ^= 0xff;
        }
        return cipherBuf;
    }

    @Test
    public void encryptChacha() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.CHACHA20_POLY1305);

        byte[] nPub = lazySodium.nonce(AEAD.CHACHA20POLY1305_NPUBBYTES);

        String cipher = lazySodium.encrypt(PASSWORD, null, nPub, key, AEAD.Method.CHACHA20_POLY1305);
        String decrypted = lazySodium.decrypt(cipher, null, nPub, key, AEAD.Method.CHACHA20_POLY1305);

        TestCase.assertEquals(decrypted, PASSWORD);
    }

    @Test(expected = AEADAuthenticationException.class)
    public void encryptChachaMalformedCipher() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.CHACHA20_POLY1305);

        byte[] nPub = lazySodium.nonce(AEAD.CHACHA20POLY1305_NPUBBYTES);

        String cipher = lazySodium.encrypt(PASSWORD, null, nPub, key, AEAD.Method.CHACHA20_POLY1305);
        String decrypted = lazySodium.decrypt(malformCipher(cipher), null, nPub, key, AEAD.Method.CHACHA20_POLY1305);
    }

    @Test
    public void encryptChachaIetf() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.CHACHA20_POLY1305_IETF);

        byte[] nPub = lazySodium.nonce(AEAD.CHACHA20POLY1305_IETF_NPUBBYTES);

        String cipher = lazySodium.encrypt(PASSWORD, null, nPub, key, AEAD.Method.CHACHA20_POLY1305_IETF);
        String decrypted = lazySodium.decrypt(cipher, null, nPub, key, AEAD.Method.CHACHA20_POLY1305_IETF);

        TestCase.assertEquals(decrypted, PASSWORD);
    }

    @Test(expected = AEADAuthenticationException.class)
    public void encryptChachaIetfMalformedCipher() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.CHACHA20_POLY1305_IETF);

        byte[] nPub = lazySodium.nonce(AEAD.CHACHA20POLY1305_IETF_NPUBBYTES);

        String cipher = lazySodium.encrypt(PASSWORD, null, nPub, key, AEAD.Method.CHACHA20_POLY1305_IETF);
        String decrypted = lazySodium.decrypt(malformCipher(cipher), null, nPub, key, AEAD.Method.CHACHA20_POLY1305_IETF);
    }

    @Test
    public void encryptXChacha() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.XCHACHA20_POLY1305_IETF);

        byte[] nPub = lazySodium.nonce(AEAD.XCHACHA20POLY1305_IETF_NPUBBYTES);

        String cipher = lazySodium.encrypt(PASSWORD, null, nPub, key, AEAD.Method.XCHACHA20_POLY1305_IETF);
        String decrypted = lazySodium.decrypt(cipher, null, nPub, key, AEAD.Method.XCHACHA20_POLY1305_IETF);

        TestCase.assertEquals(decrypted, PASSWORD);
    }

    @Test(expected = AEADAuthenticationException.class)
    public void encryptXChachaMalformedCipher() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.XCHACHA20_POLY1305_IETF);

        byte[] nPub = lazySodium.nonce(AEAD.XCHACHA20POLY1305_IETF_NPUBBYTES);

        String cipher = lazySodium.encrypt(PASSWORD, null, nPub, key, AEAD.Method.XCHACHA20_POLY1305_IETF);
        String decrypted = lazySodium.decrypt(malformCipher(cipher), null, nPub, key, AEAD.Method.XCHACHA20_POLY1305_IETF);
    }

    @Test
    public void encryptChachaDetached() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.CHACHA20_POLY1305);

        byte[] nPub = lazySodium.nonce(AEAD.CHACHA20POLY1305_NPUBBYTES);

        DetachedEncrypt detachedEncrypt
                = lazySodium.encryptDetached(PASSWORD, null, null, nPub, key, AEAD.Method.CHACHA20_POLY1305);

        DetachedDecrypt detachedDecrypt = lazySodium.decryptDetached(detachedEncrypt, null, null, nPub, key, AEAD.Method.CHACHA20_POLY1305);

        TestCase.assertEquals(detachedDecrypt.getMessageString(), PASSWORD);
    }

    @Test(expected = AEADAuthenticationException.class)
    public void encryptChachaDetachedMalformedCipher() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.CHACHA20_POLY1305);

        byte[] nPub = lazySodium.nonce(AEAD.CHACHA20POLY1305_NPUBBYTES);

        DetachedEncrypt detachedEncrypt
                = lazySodium.encryptDetached(PASSWORD, null, null, nPub, key, AEAD.Method.CHACHA20_POLY1305);

        DetachedEncrypt malformed = new DetachedEncrypt(malformCipherBytes(detachedEncrypt.getCipherString()), detachedEncrypt.getMac());
        DetachedDecrypt detachedDecrypt = lazySodium.decryptDetached(malformed, null, null, nPub, key, AEAD.Method.CHACHA20_POLY1305);
    }


    @Test
    public void encryptChachaIetfDetached() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.CHACHA20_POLY1305_IETF);

        byte[] nPub = lazySodium.nonce(AEAD.CHACHA20POLY1305_IETF_NPUBBYTES);

        DetachedEncrypt detachedEncrypt
                = lazySodium.encryptDetached(PASSWORD, null, null, nPub, key, AEAD.Method.CHACHA20_POLY1305_IETF);

        DetachedDecrypt detachedDecrypt = lazySodium.decryptDetached(detachedEncrypt, null, null, nPub, key, AEAD.Method.CHACHA20_POLY1305_IETF);

        TestCase.assertEquals(detachedDecrypt.getMessageString(), PASSWORD);
    }

    @Test(expected = AEADAuthenticationException.class)
    public void encryptChachaIetfDetachedMalformedCipher() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.CHACHA20_POLY1305_IETF);

        byte[] nPub = lazySodium.nonce(AEAD.CHACHA20POLY1305_IETF_NPUBBYTES);

        DetachedEncrypt detachedEncrypt
                = lazySodium.encryptDetached(PASSWORD, null, null, nPub, key, AEAD.Method.CHACHA20_POLY1305_IETF);
        DetachedEncrypt malformed = new DetachedEncrypt(malformCipherBytes(detachedEncrypt.getCipherString()), detachedEncrypt.getMac());

        DetachedDecrypt detachedDecrypt = lazySodium.decryptDetached(malformed, null, null, nPub, key, AEAD.Method.CHACHA20_POLY1305_IETF);
    }

    @Test
    public void encryptXChachaDetached() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.XCHACHA20_POLY1305_IETF);

        byte[] nPub = lazySodium.nonce(AEAD.XCHACHA20POLY1305_IETF_NPUBBYTES);

        DetachedEncrypt detachedEncrypt
                = lazySodium.encryptDetached(PASSWORD, null, null, nPub, key, AEAD.Method.XCHACHA20_POLY1305_IETF);

        DetachedDecrypt detachedDecrypt = lazySodium.decryptDetached(detachedEncrypt, null, null, nPub, key, AEAD.Method.XCHACHA20_POLY1305_IETF);

        TestCase.assertEquals(detachedDecrypt.getMessageString(), PASSWORD);
    }

    @Test(expected = AEADAuthenticationException.class)
    public void encryptXChachaDetachedMalformedCipher() throws AEADAuthenticationException {

        Key key = lazySodium.keygen(AEAD.Method.XCHACHA20_POLY1305_IETF);

        byte[] nPub = lazySodium.nonce(AEAD.XCHACHA20POLY1305_IETF_NPUBBYTES);

        DetachedEncrypt detachedEncrypt
                = lazySodium.encryptDetached(PASSWORD, null, null, nPub, key, AEAD.Method.XCHACHA20_POLY1305_IETF);
        DetachedEncrypt malformed = new DetachedEncrypt(malformCipherBytes(detachedEncrypt.getCipherString()), detachedEncrypt.getMac());

        DetachedDecrypt detachedDecrypt = lazySodium.decryptDetached(malformed, null, null, nPub, key, AEAD.Method.XCHACHA20_POLY1305_IETF);
    }


    @Test
    public void encryptAES() throws AEADAuthenticationException {
        if (lazySodium.cryptoAeadAES256GCMIsAvailable()) {
            Key key = lazySodium.keygen(AEAD.Method.AES256GCM);

            byte[] nPub = lazySodium.nonce(AEAD.AES256GCM_NPUBBYTES);

            String cipher = lazySodium.encrypt(PASSWORD, null, nPub, key, AEAD.Method.AES256GCM);
            String decrypted = lazySodium.decrypt(cipher, null, nPub, key, AEAD.Method.AES256GCM);

            TestCase.assertEquals(decrypted, PASSWORD);
        }
    }

    @Test(expected = AEADAuthenticationException.class)
    public void encryptAESMalformedCipher() throws AEADAuthenticationException {
        if (lazySodium.cryptoAeadAES256GCMIsAvailable()) {
            Key key = lazySodium.keygen(AEAD.Method.AES256GCM);

            byte[] nPub = lazySodium.nonce(AEAD.AES256GCM_NPUBBYTES);

            String cipher = lazySodium.encrypt(PASSWORD, null, nPub, key, AEAD.Method.AES256GCM);
            String decrypted = lazySodium.decrypt(malformCipher(cipher), null, nPub, key, AEAD.Method.AES256GCM);

            TestCase.assertEquals(decrypted, PASSWORD);
        }
    }

    @Test
    public void encryptAESDetached() throws AEADAuthenticationException {
        if (lazySodium.cryptoAeadAES256GCMIsAvailable()) {
            Key key = lazySodium.keygen(AEAD.Method.AES256GCM);

            byte[] nPub = lazySodium.nonce(AEAD.AES256GCM_NPUBBYTES);

            DetachedEncrypt detachedEncrypt
                    = lazySodium.encryptDetached(PASSWORD, null, null, nPub, key, AEAD.Method.AES256GCM);

            DetachedDecrypt detachedDecrypt = lazySodium.decryptDetached(detachedEncrypt, null, null, nPub, key, AEAD.Method.AES256GCM);

            TestCase.assertEquals(detachedDecrypt.getMessageString(), PASSWORD);
        }
    }

    @Test(expected = AEADAuthenticationException.class)
    public void encryptAESDetachedMalformedCipher() throws AEADAuthenticationException {
        if (lazySodium.cryptoAeadAES256GCMIsAvailable()) {
            Key key = lazySodium.keygen(AEAD.Method.AES256GCM);

            byte[] nPub = lazySodium.nonce(AEAD.AES256GCM_NPUBBYTES);

            DetachedEncrypt detachedEncrypt
                    = lazySodium.encryptDetached(PASSWORD, null, null, nPub, key, AEAD.Method.AES256GCM);
            DetachedEncrypt malformed = new DetachedEncrypt(malformCipherBytes(detachedEncrypt.getCipherString()), detachedEncrypt.getMac());

            DetachedDecrypt detachedDecrypt = lazySodium.decryptDetached(malformed, null, null, nPub, key, AEAD.Method.AES256GCM);
        }
    }
}
