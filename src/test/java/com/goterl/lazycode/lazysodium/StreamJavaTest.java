/*
 * Copyright (c) Terl Tech Ltd • 14/06/19 17:52 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

package com.goterl.lazycode.lazysodium;/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.goterl.lazycode.lazysodium.interfaces.StreamJava;
import com.goterl.lazycode.lazysodium.utils.Key;
import junit.framework.TestCase;
import org.junit.Test;

public class StreamJavaTest extends BaseTest {

    private String message1 = "A top secret message.";

    @Test
    public void javaXChaCha20() {
        StreamJava.Lazy streamLazy = (StreamJava.Lazy) lazySodium;

        byte[] nonce = lazySodium.nonce(StreamJava.XCHACHA20_NONCEBYTES);
        Key key = streamLazy.cryptoStreamKeygen(StreamJava.Method.XCHACHA20);
        String cipher = streamLazy.cryptoStreamXor(message1, nonce, key, StreamJava.Method.XCHACHA20);
        String finalMsg = streamLazy.cryptoStreamXorDecrypt(cipher, nonce, key, StreamJava.Method.XCHACHA20);

        TestCase.assertEquals(message1, finalMsg);
    }

    @Test
    public void javaSalsa2012() {
        StreamJava.Lazy streamLazy = (StreamJava.Lazy) lazySodium;

        byte[] nonce = lazySodium.nonce(StreamJava.SALSA2012_NONCEBYTES);
        Key key = streamLazy.cryptoStreamKeygen(StreamJava.Method.SALSA20_12);
        String cipher = streamLazy.cryptoStreamXor(message1, nonce, key, StreamJava.Method.SALSA20_12);
        String finalMsg = streamLazy.cryptoStreamXorDecrypt(cipher, nonce, key, StreamJava.Method.SALSA20_12);

        TestCase.assertEquals(message1, finalMsg);
    }

    @Test
    public void javaSalsa208() {
        StreamJava.Lazy streamLazy = (StreamJava.Lazy) lazySodium;

        byte[] nonce = lazySodium.nonce(StreamJava.SALSA208_NONCEBYTES);
        Key key = streamLazy.cryptoStreamKeygen(StreamJava.Method.SALSA20_8);
        String cipher = streamLazy.cryptoStreamXor(message1, nonce, key, StreamJava.Method.SALSA20_8);
        String finalMsg = streamLazy.cryptoStreamXorDecrypt(cipher, nonce, key, StreamJava.Method.SALSA20_8);

        TestCase.assertEquals(message1, finalMsg);
    }


}
