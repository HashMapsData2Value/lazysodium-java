/*
 * Copyright (c) Terl Tech Ltd • 10/05/18 23:39 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.goterl.lazycode.lazysodium.exceptions.SodiumException;
import com.goterl.lazycode.lazysodium.interfaces.KeyExchange;
import junit.framework.TestCase;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class KeyExchangeTest extends BaseTest {


    @Test
    public void generateKeyPair() {
        KeyExchange.KeyPair keys = lazySodium.cryptoKxKeypair();
        assertNotNull(keys);
    }

    @Test
    public void generateDeterministicPublicKeyPair() {
        byte[] seed = new byte[KeyExchange.SEEDBYTES];
        KeyExchange.KeyPair keys = lazySodium.cryptoKxKeypair(seed);
        KeyExchange.KeyPair keys2 = lazySodium.cryptoKxKeypair(seed);

        TestCase.assertEquals(keys.getPublicKeyString(), keys2.getPublicKeyString());
    }

    @Test
    public void generateDeterministicSecretKeyPair() {
        byte[] seed = new byte[KeyExchange.SEEDBYTES];
        KeyExchange.KeyPair keys = lazySodium.cryptoKxKeypair(seed);
        KeyExchange.KeyPair keys2 = lazySodium.cryptoKxKeypair(seed);

        TestCase.assertEquals(keys.getSecretKeyString(), keys2.getSecretKeyString());
    }


    @Test
    public void generateSessionPair() throws SodiumException {
        // Generate the client's keypair
        KeyExchange.KeyPair clientKeys = lazySodium.cryptoKxKeypair();

        // Generate the server keypair
        KeyExchange.KeyPair serverKeys = lazySodium.cryptoKxKeypair();

        KeyExchange.SessionPair clientSession = lazySodium.cryptoKxClientSessionKeys(clientKeys, serverKeys);
        KeyExchange.SessionPair serverSession = lazySodium.cryptoKxServerSessionKeys(serverKeys, clientKeys);

        // You can now use the secret and public keys of the client and the server
        // to encrypt and decrypt messages to one another.
        // lazySodium.cryptoSecretBoxEasy( ... );

        // The Rx of the client should equal the Tx of the server
        TestCase.assertEquals(clientSession.getRxString(), serverSession.getTxString());
    }

}
