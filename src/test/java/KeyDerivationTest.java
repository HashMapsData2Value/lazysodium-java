/*
 * Copyright (c) Terl Tech Ltd • 04/05/18 22:58 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import com.goterl.lazycode.lazysodium.interfaces.KeyDerivation;
import org.junit.Test;

import static junit.framework.TestCase.assertTrue;


public class KeyDerivationTest extends BaseTest {

    @Test
    public void nativeKeygen() {
        byte[] masterKey = new byte[KeyDerivation.MASTER_KEY_BYTES];
        byte[] context = lazySodium.bytes("Examples");
        // Create a master key
        keyDerivation.cryptoKdfKeygen(masterKey);

        // Create subkey number 1 with the max bytes
        byte[] subKey = new byte[KeyDerivation.BYTES_MAX];
        keyDerivation.cryptoKdfDeriveFromKey(
                subKey, subKey.length, 1L,
                context, masterKey
        );

        // Create subkey number 2 with min bytes
        byte[] subKey2 = new byte[KeyDerivation.BYTES_MIN];
        keyDerivation.cryptoKdfDeriveFromKey(
                subKey2, subKey2.length, 2L,
                context, masterKey
        );

        String mkStr = lazySodium.sodiumBin2Hex(masterKey);
        String skStr = lazySodium.sodiumBin2Hex(subKey);
        String skStr2 = lazySodium.sodiumBin2Hex(subKey2);

        // Print outs
//        System.out.println("Master key: " + mkStr);
//        System.out.println("Subkey: " + skStr);
//        System.out.println("Subkey2: " + skStr2);

        assertTrue("Master or subkeys were generated with wrong params.", mkStr != null && skStr != null && skStr2 != null);
    }

    @Test
    public void lazyKeygen() {
        String key = keyDerivationLazy.cryptoKdfKeygen();
    }


}
