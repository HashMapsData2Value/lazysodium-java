/*
 * Copyright (c) Terl Tech Ltd • 07/05/18 12:05 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.goterl.lazycode.lazysodium.interfaces.SecretStream;
import com.goterl.lazycode.lazysodium.structs.crypto_secretstream_xchacha20poly1305_state;
import junit.framework.TestCase;
import org.junit.Test;

public class SecretStreamTest extends BaseTest {

    private String message1 = "Arbitrary data to encrypt";
    private String message2 = "split into";
    private String message3 = "three messages";

    private byte[] m1 = lazySodium.bytes(message1);
    private byte[] m2 = lazySodium.bytes(message2);
    private byte[] m3 = lazySodium.bytes(message3);

    private int m1Len = m1.length;
    private int m2Len = m2.length;
    private int m3Len = m3.length;

    private int c1Len = m1Len + SecretStream.XCHACHA20POLY1305_ABYTES;
    private int c2Len = m2Len + SecretStream.XCHACHA20POLY1305_ABYTES;
    private int c3Len = m3Len + SecretStream.XCHACHA20POLY1305_ABYTES;

    private byte[] c1 = new byte[c1Len];
    private byte[] c2 = new byte[c2Len];
    private byte[] c3 = new byte[c3Len];


    @Test
    public void struct() {
        final crypto_secretstream_xchacha20poly1305_state state =
                new crypto_secretstream_xchacha20poly1305_state.ByReference();

        byte[] key = new byte[SecretStream.XCHACHA20POLY1305_KEYBYTES];
        byte[] header = new byte[SecretStream.XCHACHA20POLY1305_HEADERBYTES];

        lazySodium.cryptoSecretStreamXChacha20Poly1305Keygen(key);

        // Start the encryption
        lazySodium.cryptoSecretStreamXChacha20Poly1305InitPush(state, header, key);

        lazySodium.cryptoSecretStreamXChacha20Poly1305Push(
                state,
                c1,
                m1,
                m1Len,
                (byte) 0
        );

        lazySodium.cryptoSecretStreamXChacha20Poly1305Push(
                state,
                c2,
                m2,
                m2Len,
                (byte) 0
        );

        // When finished, add XCHACHA20POLY1305_TAG_FINAL
        // to indicate end of stream.
        lazySodium.cryptoSecretStreamXChacha20Poly1305Push(
                state,
                c3,
                m3,
                m3Len,
                SecretStream.XCHACHA20POLY1305_TAG_FINAL
        );

        // Start the decryption
        byte[] m1Decrypted = new byte[m1Len];
        byte[] m2Decrypted = new byte[m2Len];
        byte[] m3Decrypted = new byte[m3Len];
        byte tag = 0;

        lazySodium.cryptoSecretStreamXChacha20Poly1305InitPull(state, header, key);

        lazySodium.cryptoSecretStreamXChacha20Poly1305Pull(
                state,
                m1Decrypted,
                tag,
                c1,
                c1Len
        );

        if (tag == SecretStream.XCHACHA20POLY1305_TAG_FINAL) {
            TestCase.assertNotSame("Stream ended early", tag, SecretStream.XCHACHA20POLY1305_TAG_FINAL);
        }

        lazySodium.cryptoSecretStreamXChacha20Poly1305Pull(
                state,
                m2Decrypted,
                tag,
                c2,
                c2Len
        );

        if (tag == SecretStream.XCHACHA20POLY1305_TAG_FINAL) {
            TestCase.assertNotSame("Stream ended early", tag, SecretStream.XCHACHA20POLY1305_TAG_FINAL);
        }

        lazySodium.cryptoSecretStreamXChacha20Poly1305Pull(
                state,
                m3Decrypted,
                tag,
                c3,
                c3Len
        );


        if (tag == SecretStream.XCHACHA20POLY1305_TAG_FINAL) {
            TestCase.assertTrue(
                    lazySodium.str(m1Decrypted).equals(message1) &&
                    lazySodium.str(m2Decrypted).equals(message2) &&
                    lazySodium.str(m3Decrypted).equals(message3)
            );
        }

    }




}
