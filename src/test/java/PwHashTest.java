/*
 * Copyright (c) Terl Tech Ltd • 03/05/18 11:37 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.goterl.lazycode.lazysodium.LazySodium;
import com.goterl.lazycode.lazysodium.exceptions.SodiumException;
import com.goterl.lazycode.lazysodium.interfaces.PwHash;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class PwHashTest extends BaseTest {

    @Test
    public void nativeHash() throws SodiumException {

        String output = pwHashLazy.cryptoPwHash(
                PASSWORD,
                PwHash.BYTES_MIN + 20,
                lazySodium.randomBytesBuf(PwHash.SALTBYTES),
                5L,
                8192L * 2,
                PwHash.Alg.PWHASH_ALG_ARGON2ID13
        );

        assertNotNull("Native hashing failed.", output);
    }


    @Test
    public void strMin() throws SodiumException {

        String hash = pwHashLazy.cryptoPwHashStr(
                PASSWORD,
                3,
                PwHash.ARGON2ID_MEMLIMIT_MIN
        );

        boolean isCorrect = pwHashLazy.cryptoPwHashStrVerify(hash, PASSWORD);

        assertTrue("Minimum hashing failed.", isCorrect);
    }


    // We don't test for this as it's pretty demanding and
    // will fail on most machines
    public void cryptoPwHashStrTestSensitive() { }


    @Test
    public void scryptHash() throws SodiumException {

        byte[] salt = new byte[LazySodium.longToInt(PwHash.SCRYPTSALSA208SHA256_SALT_BYTES)];
        String scryptHash = pwHashLazy.cryptoPwHashScryptSalsa208Sha256(
                PASSWORD,
                salt,
                PwHash.SCRYPTSALSA208SHA256_OPSLIMIT_MIN,
                PwHash.SCRYPTSALSA208SHA256_MEMLIMIT_MIN
        );

        String hash = pwHashLazy.cryptoPwHashScryptSalsa208Sha256Str(
                PASSWORD,
                PwHash.SCRYPTSALSA208SHA256_OPSLIMIT_MIN,
                PwHash.SCRYPTSALSA208SHA256_MEMLIMIT_MIN
        );

        boolean isCorrect = pwHashLazy.cryptoPwHashScryptSalsa208Sha256StrVerify(hash, PASSWORD);

        assertTrue("Minimum hashing failed.", isCorrect);
    }

}
