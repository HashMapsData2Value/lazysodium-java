/*
 * Copyright (c) Terl Tech Ltd • 24/07/18 16:23 • goterl.com
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v2.0. If a copy of the MPL was not distributed with this
 * file, you can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.goterl.lazycode.lazysodium.LazySodium;
import com.goterl.lazycode.lazysodium.exceptions.SodiumException;
import com.goterl.lazycode.lazysodium.interfaces.PwHash;
import com.goterl.lazycode.lazysodium.interfaces.Scrypt;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class PwHashTest extends BaseTest {

    private final String PASSWORD = "Password123456!!!!@@";


    private PwHash.Lazy pwHashLazy;

    @Before
    public void before() {
        pwHashLazy = (PwHash.Lazy) lazySodium;
    }


    @Test
    public void scryptHash() throws SodiumException {

        byte[] salt = new byte[LazySodium.longToInt(Scrypt.SCRYPTSALSA208SHA256_SALT_BYTES)];
        String scryptHash = lazySodium.cryptoPwHashScryptSalsa208Sha256(
                PASSWORD,
                salt,
                Scrypt.SCRYPTSALSA208SHA256_OPSLIMIT_MIN,
                Scrypt.SCRYPTSALSA208SHA256_MEMLIMIT_MIN
        );

        String hash = lazySodium.cryptoPwHashScryptSalsa208Sha256Str(
                PASSWORD,
                Scrypt.SCRYPTSALSA208SHA256_OPSLIMIT_MIN,
                Scrypt.SCRYPTSALSA208SHA256_MEMLIMIT_MIN
        );

        boolean isCorrect = lazySodium.cryptoPwHashScryptSalsa208Sha256StrVerify(hash, PASSWORD);

        assertTrue("Minimum hashing failed.", isCorrect);
    }

}
